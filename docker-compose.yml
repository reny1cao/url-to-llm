version: '3.9'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: url_to_llm
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Create MinIO bucket
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 minioadmin minioadmin;
      mc mb myminio/llm-manifests || true;
      mc anonymous set public myminio/llm-manifests;
      exit 0;
      "

  # Crawler service
  crawler:
    build: ./crawler
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/url_to_llm
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: llm-manifests
      PLAYWRIGHT_CHROMIUM: "true"
      PYTHONUNBUFFERED: 1
    volumes:
      - ./crawler:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["python", "-m", "src.cli", "--help"]

  # Backend API
  backend:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/url_to_llm
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: llm-manifests
      CDN_URL: http://localhost:9000/llm-manifests
      SECRET_KEY: your-secret-key-here-change-in-production
      OAUTH_CLIENT_ID: demo-client
      OAUTH_CLIENT_SECRET: demo-secret
      ALLOWED_ORIGINS: '["http://localhost:3000"]'
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Frontend
  frontend:
    build: ./frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_CDN_URL: http://localhost:9000/llm-manifests
      NEXT_PUBLIC_WS_URL: ws://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # Celery Worker
  celery-worker:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/url_to_llm
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: llm-manifests
      CDN_URL: http://localhost:9000/llm-manifests
      SECRET_KEY: your-secret-key-here-change-in-production
      PYTHONUNBUFFERED: 1
      C_FORCE_ROOT: 1
    volumes:
      - ./backend:/app
      - ./crawler:/crawler
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: ["celery", "-A", "app.core.celery_app", "worker", "--loglevel=info", "--concurrency=2", "--queues=crawler"]

  # Celery Beat (Scheduler)
  celery-beat:
    build: ./backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/url_to_llm
      REDIS_URL: redis://redis:6379
      SECRET_KEY: your-secret-key-here-change-in-production
      PYTHONUNBUFFERED: 1
      C_FORCE_ROOT: 1
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["celery", "-A", "app.core.celery_app", "beat", "--loglevel=info"]

  # Flower (Celery monitoring)
  flower:
    build: ./backend
    environment:
      CELERY_BROKER_URL: redis://redis:6379
      CELERY_RESULT_BACKEND: redis://redis:6379
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: admin:admin
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery-worker
    command: ["celery", "-A", "app.core.celery_app", "flower", "--port=5555"]

volumes:
  postgres_data:
  redis_data:
  minio_data: